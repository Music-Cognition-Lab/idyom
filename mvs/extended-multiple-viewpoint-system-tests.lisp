(cl:in-package #:mvs)

(5am:def-suite extended-multiple-viewpoint-system)
(5am:in-suite extended-multiple-viewpoint-system)

(5am:test set-equal
  (5am:is (not (set-equal nil nil)))
  (5am:is (set-equal '(a) '(a)))
  (5am:is (set-equal '(a b) '(b a)))
  (5am:is (not (set-equal '(a c) '(b a))))
  (5am:is (not (set-equal '() '(b a))))
  (5am:is (not (set-equal '(a b) '(b a c))))
  (5am:is (set-equal (set-equal '(c a b) '(b c a))
		     '(a b c))))
  
(5am:test (filter-and-merge-var-sets :depends-on set-equal)
  (5am:is (set-equal (filter-and-merge-var-sets '((a) (b)))
		     '((a) (b)) :test #'set-equal))
  (5am:is (reduce #'(lambda (a b) (set-equal a b :test #'set-equal))
		  (list (filter-and-merge-var-sets '((a) (a b)))
			(filter-and-merge-var-sets '((a b) (b)))
			'((a b)))))
  (5am:is (reduce #'(lambda (a b) (set-equal a b :test #'set-equal))
		  (list (filter-and-merge-var-sets '((a b) (b c)))
			(filter-and-merge-var-sets '((b c) (a b)))
			'((a b c)))))
  (5am:is (reduce #'(lambda (a b) (set-equal a b :test #'set-equal))
		  (list (filter-and-merge-var-sets '((a b) (b) (a)))
			(filter-and-merge-var-sets '((a) (b) (a b)))
			'((a b)))))
  (5am:is (reduce #'(lambda (a b) (set-equal a b :test #'set-equal))
		  (list (filter-and-merge-var-sets '((a) (b) (b c)))
			(filter-and-merge-var-sets '((b c) (b) (a)))
			'((a) (b c))))))
